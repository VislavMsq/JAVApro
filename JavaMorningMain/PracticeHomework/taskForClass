1. Спроектируйте класс для управления задачами. В нем должен быть метод по добавлению задачи с приоритетом
 * и получения самой приоритетной задачи (с её удалением)
 * <p>
 * Примечание:
 * а) Приоритет - целое число. Чем оно больше тем приоритет выше.
 * б) Задача представляет собой класс Task с одним полем "String name". Приоритет не является составной частью задачи
 * и передаётся отдельно
 * <p>
2. Нужно написать модуль программы по составлению отчета по продажам за выбранные даты.
 * Продажа представляет собой: артикул, количество и стоимость.
 * Отчет должен отображать: самый продаваемый артикул и общую стоимость всех продаж по каждому артикулу.
 * Желаемый интерфейс:
 * <p>
 * ReportGenerator {
 * ReportResult generateReport(ZonedDateTime from, ZoneDateTime to);
 * }
 * <p>
 * Примечание:
 * а) при этом выгрузкой информации по продажам занимается другая команда, которая пока ещё не передала вам
 * информацию как в вашем модуле получать сами заказы. Обойдите это ограничение.
 * б) ZonedDateTime можно создать с помощью:
 *

 Создайте класс "Банковский счет" (BankAccount), который имеет поля: номер счета (accountNumber), баланс (balance) и
 список транзакций (transactions). Добавьте методы для добавления и снятия денег со счета, а также для получения
 текущего баланса.

 Создайте класс "Библиотека" (Library), который имеет поля: список книг (books) и список читателей (readers). Класс
 "Книга" (Book) имеет поля: название (title), автор (author) и доступность (available). Класс "Читатель" (Reader)
 имеет поля: имя (name) и список взятых книг (borrowedBooks). Добавьте методы для добавления книг в библиотеку,
 выдачи книги читателю и возврата книги в библиотеку.

 Создайте класс "Магазин" (Shop), который имеет поля: список товаров (products) и список покупателей (customers).
 Класс "Товар" (Product) имеет поля: название (name), цена (price) и количество на складе (quantity). Класс "Покупатель"
 (Customer) имеет поля: имя (name) и список купленных товаров (purchasedProducts). Добавьте методы для добавления
 товаров в магазин, покупки товара покупателем и обновления количества товара на складе.

 Создайте класс "Учебное заведение" (EducationalInstitution), который имеет поля: список преподавателей (teachers) и
 список студентов (students). Класс "Преподаватель" (Teacher) имеет поля: имя (name), предмет (subject) и список
 преподаваемых групп (teachingGroups). Класс "Студент" (Student) имеет поля: имя (name), группа (group) и список
 предметов (subjects). Добавьте методы для добавления преподавателей и студентов, а также для добавления студентов в
 группы и назначения им предметов.

 Создайте класс "Заказ" (Order), который имеет поля: номер заказа (orderNumber), список товаров (products) и статус
 заказа (status). Класс "Товар" (Product) имеет поля: название (name), цена (price) и количество (quantity). Добавьте
 методы для добавления товаров в заказ, изменения статуса заказа и расчета общей стоимости заказа.

 ---------------------------------------------------------------------------------------------------------------------
Задача: Магазин автомобилей

Напишите программу для управления магазином автомобилей. Каждый автомобиль имеет следующие характеристики: марка,
модель, год выпуска, цена. Программа должна позволить пользователю добавлять новые автомобили в магазин, просматривать
список доступных автомобилей, удалять автомобили из списка и искать автомобили по заданным критериям (например,
по марке, модели, цене, году выпуска).

Задача: Банковский счет

Напишите программу для управления банковскими счетами. У каждого счета есть номер счета, имя владельца, баланс и тип
счета (например, сберегательный или текущий). Программа должна предоставить возможность создания новых счетов,
пополнения и снятия денег, просмотра баланса счета, перевода денег между счетами, а также закрытия счетов.

----------------------------------------------------------------------------------------------------------------------

Задача: Интернет-магазин с доставкой

Товары:

Каждый товар имеет уникальный код, название, описание, цену и количество на складе.

Клиенты:

Клиенты могут создавать аккаунты в магазине. У каждого клиента есть уникальный идентификатор, имя, адрес доставки и
история заказов.

Заказы:

Когда клиент хочет сделать заказ, он добавляет товары в свою корзину и оформляет заказ. Заказ содержит информацию о
клиенте, дате и времени заказа, а также список выбранных товаров с количеством каждого товара.

Доставка:

Магазин предоставляет услугу доставки. Есть несколько видов доставки с различными ставками. При оформлении заказа
клиент может выбрать тип доставки, а также указать адрес доставки в км, если он отличается от адреса в профиле клиента.


Требования:

Создайте классы для представления товаров, клиентов, заказов и доставки, которые хранят соответствующую информацию и
предоставляют методы для управления данными.
Реализуйте функции для добавления товаров, создания клиентов и оформления заказов.
Реализуйте функции для подсчета общей стоимости заказов и доступных товаров на складе.
Реализуйте функции для управления доставкой и расчета стоимости доставки в зависимости от выбранного типа доставки и
адреса доставки.
Предусмотрите возможность поиска клиентов и заказов по различным критериям (например, по имени клиента, коду товара
или дате заказа).


class Product
    String name
    int price
    int quantity

            methode:
                generateUniqueNum
                sum

class Client
    String name
    int addressDelivery
    List<Order> history
    List<Product> basket
    bool isAdmin

    methode:
        addToBasket


class Order
    List<Product> basket --
    date
    enum TypeDelivery
        methode:
           allSum

class Delivery -- non object
    or or = new or
    methode
    matchDelivery
        enum TypeDelivery
            free - more > 50 -> free
            basic - 1 $/km
            premium - 2.5 $/km | more > 100 -> 1 $/km




class Shop
    List<Client>
    methode:
        available
        optionalShow
