Задача: Учет блюд в столовой

Создайте класс Блюдо с полями:

String Название,
double Цена,
Enum Категория.

Создайте класс Заказ с полями:

List<Dish> Список блюд,

String Время заказа, -- MM-DD-HH-mm
int Столик.

Создайте класс Кафетерия, где будет храниться список заказов.

Реализуйте методы в Кафетерия:

Вывод всех заказов.
Расчет средней суммы чека.
Поиск самой популярной категории блюд.
Группировка заказов по часам.
Сортировка заказов по сумме.

-------------------------------------------------------------------------------------

Создайте класс Сотрудник со следующими полями:

String имя
String должность
double ставка
Создайте класс Проект со следующими полями:

String название
String описание
Сотрудник менеджерПроекта
List<Сотрудник> команда
LocalDate датаНачала
LocalDate датаОкончания
double бюджет
СтатусПроекта статус
Создайте перечисление СтатусПроекта с возможными значениями: Планируется, ВРаботе, Завершен.

Создайте класс СистемаУправления с методами:

void создатьПроект(Проект проект) - добавляет проект в список проектов.
void назначитьСотрудникаНаПроект(Проект проект, Сотрудник сотрудник) - добавляет сотрудника в команду проекта.
void изменитьСтатусПроекта(Проект проект, СтатусПроекта новыйСтатус) - изменяет статус проекта.
List<Проект> получитьСписокПроектовПоСтатусу(СтатусПроекта статус) - возвращает список проектов с заданным статусом.
Map<Сотрудник, Double> расчетЗарплаты() - рассчитывает и возвращает зарплату каждого сотрудника на основе их ставок и участия в проектах.
Проект получитьПроектПоИмени(String название) - возвращает проект по его названию.

-----------------------------------------------------------------------------------------------------------------------

Задача: Аниме-платформа управления списками

Вы получили задание разработать систему управления списками аниме-сериалов для аниме-платформы. Пользователи могут создавать списки своих любимых аниме, следить за просмотренными сериалами и делиться рекомендациями.

Создайте класс Пользователь со следующими полями:

String имя
int возраст
List<Аниме> списокЛюбимых
List<Аниме> списокПросмотренных
Создайте класс Аниме со следующими полями:

String название
String описание
String студия
int годВыхода
List<Жанр> жанры
double рейтинг
boolean просмотреноСоздайте перечисление Жанр с различными жанрами аниме: Боевик, Драма, Фэнтези, Романтика, Комедия и т.д.

Создайте класс ПлатформаУправления с методами:

void добавитьАниме(Аниме аниме) - добавляет аниме в список доступных аниме.
void добавитьПользователя(Пользователь пользователь) - добавляет пользователя в систему.
void добавитьАнимеВСписокЛюбимых(Пользователь пользователь, Аниме аниме) - добавляет аниме в список любимых пользователя.
void отметитьАнимеКакПросмотренное(Пользователь пользователь, Аниме аниме) - отмечает аниме как просмотренное пользователем.
List<Аниме> получитьРекомендации(Пользователь пользователь) - возвращает список рекомендованных аниме на основе аниме из списка любимых и просмотренных.
List<Аниме> получитьСписокНеПросмотренных(Пользователь пользователь) - возвращает список аниме, которые пользователь ещё не просмотрел.

------------------------------------------------------------------------------------------------------------------------


