package shopClass;

import lombok.Getter;
import lombok.ToString;

import java.util.ArrayList;
import java.util.List;

/*
 –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å "–ú–∞–≥–∞–∑–∏–Ω" (Shop), –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç –ø–æ–ª—è: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (products) –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (customers).
 –ö–ª–∞—Å—Å "–¢–æ–≤–∞—Ä" (Product) –∏–º–µ–µ—Ç –ø–æ–ª—è: –Ω–∞–∑–≤–∞–Ω–∏–µ (name), —Ü–µ–Ω–∞ (price) –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ (quantity). –ö–ª–∞—Å—Å "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"
 (Customer) –∏–º–µ–µ—Ç –ø–æ–ª—è: –∏–º—è (name) –∏ —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (purchasedProducts). –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
 —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω, –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ.
 */
/*
class Shop
    products - List
    customers - List
                     methode:
                        addProduct
                        buyProduct
                        updateProduct

class Product
    String name
    double price
    int quantity

class Customer
    String name
    purchasedProducts - List


 */
@Getter
@ToString
public class Shop {
    private List<Product> listProducts;
    private List<Customer> listCustomers;

    public Shop() {
        this.listProducts = new ArrayList<>();
        this.listCustomers = new ArrayList<>();
    }

    public void addProduct(Product product) {
        List<String> pList;

        // p.name
        // listProducts List<prod> -> listNameProducts List<Str>
        // p.name in listNameProducts

        if (product == null) {
            System.out.println("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            return;
        } else if ((pList = this.listProducts.stream().map(Product::getName).toList()).contains(product.getName())) {
            int countPro = pList.indexOf(product.getName());

            // [pr1, pr2...]
            // [–±–∞–Ω–Ω–∞–Ω, –æ–≥—ñ—Ä–æ–∫...]
            // [–±–∞–Ω–Ω–∞–Ω, –æ–≥—ñ—Ä–æ–∫...].indexOf(–±–∞–Ω–Ω–∞–Ω) -> 0
            // [pr1, pr2...].get(0)

            Product product1 = this.listProducts.get(countPro); // List.get(index)

            int co = product1.getQuantity();

            product1.setQuantity(co + product.getQuantity()); // –∏–∑–º–µ–Ω–∏–ª–∏ –∫–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ set

            System.out.println(product.getName() + " –ø—Ä–∏—Å—É—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ, –≤ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–µ -> | " + co + " -> " + product.getQuantity());
            return;
        }
        this.listProducts.add(product);
        System.out.println("Add products -> " + product.getName());
    }

    public void buyProduct(String name, int quantity, Customer customer) {
        List<String> shopList;
        if ((shopList = this.listProducts.stream().map(Product::getName).toList()).contains(name)) {
            int countPro = shopList.indexOf(name);
            Product co = this.listProducts.get(countPro);
            if (co.getQuantity() >= quantity) {
                customer.getPurchasedProducts().add(new Product(co.getName(), co.getPrice(), quantity));
                updateProduct(new Product(co.getName(), co.getPrice(), co.getQuantity() - quantity));
                System.out.println("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!");
            } else {
                System.out.println("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–ª-–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ü§∑üèª‚Äç‚ôÄÔ∏è" + " –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ -> " + co.getQuantity());
            }
        } else {
            System.out.println("–¢–∞–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");
        }
    }

    public void updateProduct(Product product) {
        List<String> shopList = this.listProducts.stream().map(Product::getName).toList();
        int countPro = shopList.indexOf(product.getName());
        Product co = this.listProducts.get(countPro);

        co.setQuantity(product.getQuantity());
        System.out.println(product.getName() + " –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ!" + " –ö–ª-–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ -> " + product.getQuantity());
    }

    public double checkBuy(Customer customer) {
        return customer.getPurchasedProducts().stream().mapToDouble(el -> el.getPrice() * el.getQuantity()).sum();
    }
    public void getProductList(){
        this.listProducts.forEach(el -> System.out.println("–ø—Ä–æ–¥—É–∫—Ç -> "+ el.getName() + "\n\t–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + el.getQuantity()));
    }
}
