Приложение будет симулировать обработку заказов в интернет-магазине.
У нас есть пул рабочих потоков, которые будут обрабатывать заказы.
Заказы будут представлены объектами класса Order, а обработка заказов будет имитироваться задержкой.

Требования:
Создать класс Order:

Поля:
orderId (уникальный идентификатор заказа)
orderDetails (детали заказа)
Конструктор для инициализации полей.
Метод process(), который будет имитировать обработку заказа путем задержки выполнения на случайное время (1-5 секунд).

Создать класс OrderProcessor:
Поле threadPool типа ExecutorService для управления пулом потоков.
Метод processOrder(Order order), который будет добавлять заказ в пул потоков для обработки.

Создать класс MainApp:
Создать несколько объектов класса Order для представления заказов.
Создать объект класса OrderProcessor.
Инициализировать пул потоков с использованием Executors.newFixedThreadPool(int n).
Для каждого заказа вызвать метод processOrder() для обработки заказа.
После завершения всех заказов завершить работу пула потоков и приложения.
Использовать Daemon Thread:

Один из потоков в пуле должен быть настроен как демон (setDaemon(true)). Это позволит завершить приложение, даже если не все потоки закончили работу.
Обработка прерываний:

В методе process() класса Order, добавить проверку на прерывание (Thread.interrupted() или Thread.currentThread().isInterrupted()).
В методе processOrder() класса OrderProcessor, после добавления заказа в пул потоков, вызвать Thread.sleep() на небольшой период и затем прервать поток.