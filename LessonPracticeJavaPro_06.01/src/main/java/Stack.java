/*
1. Сделать массив для хранения элементов
2. Сделать указатель на последний добавленный элемент массва
3. Сделать основные опперации для стека: push - добавление, pop - удаление и возврат элементов в точку вызова
    peek - показывает вершину стека, но не удаляет ее
4. Показать,что такое переполнение стэка и реализовать его динамическое расширение*
5. Сделать вспомогительные методы для трассировки стека
 */
public class Stack {
    private Object[] arr = new Object[5];   // массив в котором будут хранится значения стека
    private int cursor = 0;                 // указатель на вершину стека

    /**
     * метод для добавления элемента с стэк
     *
     * @param element добавляем элемент
     */
    public void push(Object element) {       // добавляем элемент в вершину стека
        if (cursor == arr.length) {          // если память заполнена, выделяем новую
            System.out.println("Произошло выделение доп. памяти:");
            Object[] temp = arr;
            arr = new Object[2 * arr.length]; // выделяем новую память в 2 раза больше предыдущей
            copy(temp);                      // копируем старый массив в новый
        }
        arr[cursor] = element;              // смещаем вершину стека
        cursor++;
    }

    /**
     * метод для копирования элементов массива при его расширении. Метод приватный потому что нам он не понадобится
     * за пределами класса
     *
     * @param temp - старый массив
     */
    private void copy(Object[] temp) {
        for (int i = 0; i < cursor; i++) {  // перебираем массив и записываем его значение в новый массив
            arr[i] = temp[i];
        }
    }

    /**
     * Метод для удаления и возвращения стека
     *
     * @return последний элемент в стеке
     */
    public Object pop() {
        if (!isEmpty()) {
            cursor--;                           // указатель указывает на последний элемент, он считается удаленным
            return arr[cursor];                 // возвращаем последний элементв стеке
        }
        return "Стек пуст. Удаление невозможно!";   // злоупотребляем Object возвращаем строку
    }

    /**
     * Метод для возвращения последнего элемента в стеке
     *
     * @return вершина стека
     */
    public Object peek() {
        if (!isEmpty()) {
            return arr[cursor - 1];              // возвращаем последний элемент стека
        }
        return "\nСтек пуст. Удаление невозможно!";
    }

    /**
     * метод для прверки на пустоту стека
     *
     * @return возвращает пустой лист стека
     */
    public boolean isEmpty() {
        if (cursor == 0) {                   // если стек пусть, возвращаем true
            return true;
        }
        return false;
    }

    /**
     * Метод для отображения стека
     */
    public void display() {
        System.out.println("Выделенная память: ");
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    /**
     * Метод для отображдения стека - трассировка стека
     */
    public void trace() {
        System.out.println("Стек:");
        for (int i = 0; i < cursor; i++) {      // выводим стек
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
}
